import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import json
from io import BytesIO
import re

st.set_page_config(page_title="Excel Filter App - Google Sheets", layout="wide")
st.title("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏õ‡∏µ 2561-2568 ‡∏à‡∏≤‡∏Å Google Sheets")

# --- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Google Sheets ‡∏î‡πâ‡∏ß‡∏¢ Service Account ‡∏à‡∏≤‡∏Å Secrets ---
creds_info = st.secrets["gcp_service_account"]  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô secrets.toml
credentials = Credentials.from_service_account_info(creds_info, scopes=["https://www.googleapis.com/auth/spreadsheets"])

gc = gspread.authorize(credentials)

# --- ‡πÄ‡∏õ‡∏¥‡∏î Google Sheet ‡πÅ‡∏•‡∏∞ Worksheet ---
SPREADSHEET_ID = "‡πÉ‡∏™‡πà Spreadsheet ID ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ"  # ‡πÄ‡∏ä‡πà‡∏ô https://docs.google.com/spreadsheets/d/SPREADSHEET_ID/edit...
WORKSHEET_NAME = "Sheet1"  # ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

sheet = gc.open_by_key(SPREADSHEET_ID).worksheet(WORKSHEET_NAME)

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô dict ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
data = sheet.get_all_records()
df = pd.DataFrame(data)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
required_columns = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà", "‡∏ï‡∏≥‡∏ö‡∏•", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"]
if not all(col in df.columns for col in required_columns):
    st.error("‡πÑ‡∏ü‡∏•‡πå Google Sheets ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ sort ‡∏õ‡∏µ ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
def extract_number(s):
    match = re.search(r"\d+", str(s))
    return int(match.group()) if match else float('inf')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á options ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown + ‡πÄ‡∏û‡∏¥‡πà‡∏° "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
def get_options(df, col_name):
    opts = df[col_name].dropna().unique().tolist()
    if col_name == "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì":
        opts = sorted([str(x) for x in opts])
    elif col_name == "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô":
        opts = sorted(opts, key=extract_number)
    else:
        opts.sort()
    return ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + opts

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dropdown option ‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ô
filtered_for_options = df.copy()

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Dropdown ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á ---

col1, col2 = st.columns(2)
col3, col4 = st.columns(2)

with col1:
    budget_options = get_options(filtered_for_options, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    selected_budget = st.selectbox("üí∞ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", budget_options, key="budget_select")
    if selected_budget != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_for_options = filtered_for_options[filtered_for_options["‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] == selected_budget]

with col2:
    year_options = get_options(filtered_for_options, "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    selected_year = st.selectbox("üìÖ ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", year_options, key="year_select")
    if selected_year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_for_options = filtered_for_options[filtered_for_options["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str) == selected_year]

with col3:
    project_options = get_options(filtered_for_options, "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    selected_project = st.selectbox("üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", project_options, key="project_select")
    if selected_project != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_for_options = filtered_for_options[filtered_for_options["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"] == selected_project]

with col4:
    department_options = get_options(filtered_for_options, "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
    # ‡∏ï‡∏±‡πâ‡∏á default ‡πÉ‡∏´‡πâ multiselect
    default_departments = st.session_state.get("dept_select", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])
    valid_defaults = [d for d in default_departments if d in department_options]
    if not valid_defaults:
        valid_defaults = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]
    selected_departments = st.multiselect("üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô", department_options, default=valid_defaults, key="dept_select")
    if "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" not in selected_departments:
        filtered_for_options = filtered_for_options[filtered_for_options["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"].isin(selected_departments)]

# --- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---

filtered_df = df.copy()

if selected_budget != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = filtered_df[filtered_df["‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] == selected_budget]

if selected_year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = filtered_df[filtered_df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str) == selected_year]

if selected_project != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = filtered_df[filtered_df["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"] == selected_project]

if "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" not in selected_departments:
    filtered_df = filtered_df[filtered_df["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"].isin(selected_departments)]

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏ü‡πâ‡∏≤ ---
if not filtered_df.empty:
    st.markdown(
        f"<div style='font-size:24px; color:#3178c6; background-color:#d0e7ff; padding:10px; border-radius:6px;'>"
        f"üìà ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(filtered_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</div>",
        unsafe_allow_html=True
    )
else:
    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
st.markdown("### üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.dataframe(filtered_df, use_container_width=True)

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á DataFrame ‡πÄ‡∏õ‡πá‡∏ô Excel bytes ---
def to_excel_bytes(df_to_export):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df_to_export.to_excel(writer, index=False)
    return output.getvalue()

# --- ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel ---
if not filtered_df.empty:
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel",
        data=to_excel_bytes(filtered_df),
        file_name="filtered_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
