import streamlit as st
import pandas as pd
from io import BytesIO
import re

st.set_page_config(page_title="Excel Filter App", layout="wide")
st.title("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ‡∏õ‡∏µ 2561-2568")

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ----------
sheet_id = "1Pjf0A4-M9NTxkK8Cj0AMCMiLmazfQNqq7zRb3Lnw2G8"
sheet_name = "Sheet1"  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Sheet1
csv_url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"

try:
    df = pd.read_csv(csv_url)
except Exception as e:
    st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ---------- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ----------
required_columns = ["‡∏•‡∏≥‡∏î‡∏±‡∏ö", "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô",
                    "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà", "‡∏ï‡∏≥‡∏ö‡∏•", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î"]
if not all(col in df.columns for col in required_columns):
    st.error("‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå Google Sheet ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ ----------
def extract_number(s):
    match = re.search(r"\d+", str(s))
    return int(match.group()) if match else float('inf')

def get_options(dataframe, column_name):
    options = dataframe[column_name].dropna().unique().tolist()
    if column_name == "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì":
        options = sorted([str(y) for y in options])
    elif column_name == "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô":
        options = sorted(options, key=extract_number)
    else:
        options.sort()
    return ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + options

# ---------- ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ----------
selected_budget = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
selected_year = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
selected_project = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
selected_departments = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]

# ---------- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á ----------
st.markdown("### üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
col1, col2 = st.columns(2)
col3, col4 = st.columns(2)

filtered_df_for_options = df.copy()

with col1:
    budget_options = get_options(filtered_df_for_options, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    selected_budget = st.selectbox("üí∞ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", budget_options, key="budget_select")
    if selected_budget != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df_for_options = filtered_df_for_options[filtered_df_for_options["‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] == selected_budget]

with col2:
    year_options = get_options(filtered_df_for_options, "‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì")
    selected_year = st.selectbox("üìÖ ‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì", year_options, key="year_select")
    if selected_year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df_for_options = filtered_df_for_options[filtered_df_for_options["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str) == selected_year]

with col3:
    project_options = get_options(filtered_df_for_options, "‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£")
    selected_project = st.selectbox("üìå ‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£", project_options, key="project_select")
    if selected_project != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df_for_options = filtered_df_for_options[filtered_df_for_options["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"] == selected_project]

with col4:
    department_options = get_options(filtered_df_for_options, "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
    current_selected_departments = st.session_state.get("dept_select", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"])
    valid_defaults = [d for d in current_selected_departments if d in department_options]
    if not valid_defaults:
        valid_defaults = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"]
    selected_departments = st.multiselect("üè¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô", department_options, default=valid_defaults, key="dept_select")
    if "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" not in selected_departments:
        filtered_df_for_options = filtered_df_for_options[filtered_df_for_options["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"].isin(selected_departments)]

# ---------- ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ----------
filtered_df = df.copy()
if selected_budget != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = filtered_df[filtered_df["‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"] == selected_budget]
if selected_year != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = filtered_df[filtered_df["‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì"].astype(str) == selected_year]
if selected_project != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered_df = filtered_df[filtered_df["‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£"] == selected_project]
if "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" not in selected_departments:
    filtered_df = filtered_df[filtered_df["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô"].isin(selected_departments)]

# ---------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ----------
if not filtered_df.empty:
    st.markdown(
        f"""
        <div style='
            font-size: 24px;
            color: #084298;
            background-color: #cfe2ff;
            padding: 12px;
            border-radius: 8px;
            border-left: 6px solid #084298;
            margin-bottom: 16px;
        '>
            üìà ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(filtered_df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        </div>
        """,
        unsafe_allow_html=True
    )
else:
    st.markdown(
        """
        <div style='
            font-size: 24px;
            color: #8a6d3b;
            background-color: #fcf8e3;
            padding: 12px;
            border-radius: 8px;
            border-left: 6px solid #8a6d3b;
            margin-bottom: 16px;
        '>
            ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        </div>
        """,
        unsafe_allow_html=True
    )

# ---------- ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------
st.markdown("### üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
st.dataframe(filtered_df, use_container_width=True)

# ---------- ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô Excel ----------
def to_excel_bytes(df_to_export):
    output = BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df_to_export.to_excel(writer, index=False)
    return output.getvalue()

if not filtered_df.empty:
    st.download_button(
        label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Excel",
        data=to_excel_bytes(filtered_df),
        file_name="filtered_data.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
